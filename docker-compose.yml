version: "3"
services:
    db:
        build:
            context: .
            dockerfile: ./src/docker/db-postgres.Dockerfile
            # dockerfile: ./src/docker/db-mongo.Dockerfile
        container_name: db
        deploy:
            mode: global
        restart: unless-stopped
        volumes:
            - db-data:/var/lib/postgresql/data
            #- db-data:mongo-data-path
        secrets:
            - db-password
        environment:
            - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
            - POSTGRES_DB=${DB_NAME}
        networks:
            - app_network
        ### Use `app_nework` so database is privately exposed only to these
        ### Docker services. Use ports instead of networks if public exposure
        ### is needed for external services.
        # ports:
        #     - "${DB_PORT}:${DB_PORT}"

    backend:
        build:
            context: .
            dockerfile: ./src/docker/backend.Dockerfile
        container_name: backend
        deploy:
            mode: replicated
            replicas: 1
        restart: unless-stopped
        depends_on:
            - db
        environment:
            - NODE_ENV=production
            - BACKEND_PORT=${BACKEND_PORT}
        networks:
            - app_network
        ### Use `app_nework` so service is not publicly exposed to ensure
        ### routing through nginx. Use ports instead of networks if public
        ### exposure is needed for external services.
        # ports:
        #     - "${BACKEND_PORT}:${BACKEND_PORT}"

    nginx:
        build:
            context: .
            dockerfile: ./src/docker/nginx.Dockerfile
            args:
                - NGINX_DH_BITS=${NGINX_DH_BITS} # Used in Dockerfile for build
                - NGINX_GID=${NGINX_GID}
                - NGINX_UID=${NGINX_UID}
        container_name: nginx
        deploy:
            mode: global
        restart: unless-stopped
        volumes:
            - certbot-html:/etc/nginx/html/certbot
            - certbot-etc:/etc/letsencrypt
            - certbot-var:/var/lib/letsencrypt
            - dhparam:/etc/ssl/certs
        ports:
            - "80:80"
            - "443:443"
        networks:
            - app_network
        depends_on:
            - backend
            - db
        environment:
            - APP_DOMAIN=${APP_DOMAIN}
            - BACKEND_SERVICE_NAME=backend
            - BACKEND_BASE_PATH=${BACKEND_BASE_PATH}
            - BACKEND_PORT=${BACKEND_PORT}
            - NGINX_DH_BITS=${NGINX_DH_BITS} # Used in `nginx.conf`
            # Important: `nginx.conf` location after template interpolation
            - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx

    certbot:
        build:
            context: .
            dockerfile: ./src/docker/certbot.Dockerfile
        container_name: certbot
        command:
            [
                "certonly",
                "--webroot",
                "--webroot-path=/var/www/html",
                "--agree-tos",
                "--no-eff-email",
                "--email=${CERTBOT_EMAIL}",
                "-d=${APP_DOMAIN}",
                "-d=www.${APP_DOMAIN}"
            ]
        volumes:
            - ./src/nginx/dev-certs:/opt/certbot/dev-certs
            - certbot-etc:/etc/letsencrypt
            - certbot-var:/var/lib/letsencrypt
            - certbot-html:/var/www/html
        depends_on:
            - nginx
        environment:
            - APP_DOMAIN=${APP_DOMAIN}
            - CERT_ENV=${CERT_ENV}
            - CERTBOT_EMAIL=${CERTBOT_EMAIL}
            - NGINX_GID=${NGINX_GID}
            - NGINX_UID=${NGINX_UID}

volumes:
    certbot-etc:
    certbot-html:
    certbot-var:
    db-data:
    dhparam:

networks:
    app_network:
        driver: bridge

secrets:
    db-password:
        file: ./src/docker/secrets/DB_PASSWORD
