# `${VAR}` environment variables are managed in the project-root `.env` file

# This file is copied to `/etc/nginx/templates` as `nginx.conf.template` 
# during Docker image build to interpolate variables and output `nginx.conf` 
# to `/etc/nginx/nginx.conf`. See https://hub.docker.com/_/nginx - "Using 
# environment variables" (requires nginx@^1.19).

http {
    server_tokens off;
    index index.html;
    
    upstream backends {
        # Use docker_container_name:port
        server backend:${BACKEND_PORT};
    }
    
    # Send all http traffic to https, except certbot challenge
    server {
        listen 80;
        listen [::]:80;
        server_name ${APP_DOMAIN} ${APP_DOMAIN_WITH_WWW};

        location ~ /.well-known/acme-challenge {
            allow all;
            root /etc/nginx/html/certbot;
            try_files $uri =404
        }

### START: ENABLE AFTER GENERATING SSL CERTIFICATES

        location / {
            rewrite ^ https://${APP_DOMAIN}$request_uri? permanent;
        }
    }

    # Optional: redirect https traffic to remove `www` from domain
    # If this block is not used, append server_name variable to block below
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${APP_DOMAIN_WITH_WWW};
        ssl_certificate /etc/letsencrypt/live/${APP_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${APP_DOMAIN}/privkey.pem;
        return 301 https://${APP_DOMAIN}$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${APP_DOMAIN};

        # certbot generates certificates (self-signed for localhost)
        ssl_certificate /etc/letsencrypt/live/${APP_DOMAIN}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${APP_DOMAIN}/privkey.pem;
        # dhparam-*.pem is generated during first nginx image build
        ssl_dhparam /etc/nginx/certs/dhparam-${NGINX_DH_BITS}.pem;

        ssl_session_timeout 1d;
        ssl_session_cache shared:SSLcache:10m; # 4000 sessions/megabyte
        ssl_session_tickets off;

        ssl_buffer_size 8k;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers EECDH+ECDSA+AESGCM:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:EECDH+aRSA+AESGCM:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH+AESGCM:EECDH:EDH+AESGCM:EDH+aRSA:AES256+EECDH:AES256+EDH:HIGH:!RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS;
        ssl_prefer_server_ciphers on;

        ssl_ecdh_curve secp384r1;

        ssl_stapling on;
        ssl_stapling_verify on;

        resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001] valid=300s;
        resolver_timeout 5s;

### END: ENABLE AFTER GENERATING SSL CERTIFICATES

        # Serve static files through nginx (fastest) or frontend for routing
        location / {
            include  /etc/nginx/mime.types;
            try_files $uri $uri/ /index.html;
        }

        # Serve backend routes
        location /${BACKEND_BASE_PATH} {
            try_files $uri @dynamic;
        }

        location @dynamic {
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header Referrer-Policy "no-referrer-when-downgrade" always;
            add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
            ### Enable HSTS only if you understand the implications: 
            ### https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
            ### 15768000 seconds = 6 months; 31536000s = 1 year; 0 = disabled
            # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_cache_bypass $http_upgrade;
            proxy_pass http://backends;
        }
    }
}

events {}
# TODO: https://github.com/wallarm/awesome-nginx-security, https://github.com/andrewnk/docker-alpine-nginx-modsec/blob/master/Dockerfile, mod_security, bunkerized_nginx
# TODO: https://www.nginx.com/blog/build-application-security-shield-with-nginx-wallarm#Agenda
# TODO: https://www.nginx.com/blog/performance-tuning-tips-tricks/, like zip?
# TODO: https://amplify.nginx.com/, https://github.com/docker-library/docs/tree/master/nginx#monitoring-nginx-with-amplify
# TODO: make localhost nginx work with nest and vue's live development tools